generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dao {
  id             String  @id @default(cuid())
  walletAddress  String
  title          String  @db.VarChar(60)
  description    String  @db.VarChar(280)
  fundTicker     String? @db.VarChar(10)
  userXHandle    String
  daoXHandle     String?
  telegramHandle String
  telegramGroup  String?
  website        String?
  poster         String
  indexFund      Int // OPTIONS: 1000 5000 10K 50K 100K
  profits        Int // In Percentage: max 10
  isPublic       Boolean @default(false) // If whitelist is blank then true, or false
  publicLimit    Int // If user cant 

  treasuryAddress String? @unique
  daoCoinAddress  String? @unique

  fundingStarts DateTime? // Funding ends in 7 days and after 10 days automatically starts trading
  whitelistEnds DateTime?

  tradingPeriod Int? // TRADING PERIOD: 30d 90d 120d 150d 180d 270d; trading date can be change if funding is done

  comments  Comment[]
  whitelist Whitelist[]

  createdAt DateTime @default(now())

  founder User @relation(fields: [walletAddress], references: [walletAddress])

  @@index([walletAddress])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  daoId     String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@index([userId, commentId, daoId])
}

model Comment {
  id      String @id @default(cuid())
  comment String
  name    String
  userId  String // TWITTER ID
  image   String // User Image

  daoId String

  likes     Like[]
  createdAt DateTime @default(now())

  dao Dao? @relation(fields: [daoId], references: [id])
}

model User {
  id            String       @id @default(cuid())
  walletAddress String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  daos          Dao[]
  InviteCode    InviteCode[] // ONLY ADMIN CAN CREATE INVITE CODES
  role          Role         @default(USER)
}

model InviteCode {
  id        String   @id @default(cuid())
  code      String   @unique
  userId    String?  @unique // IF USER IS NULL, THEN IT IS NOT USED
  expiresAt DateTime
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Whitelist {
  id      String @id @default(cuid())
  address String
  amount  Int

  daoId String?
  Dao   Dao?    @relation(fields: [daoId], references: [id])

  @@index([daoId])
}

enum Role {
  ADMIN
  USER
}
